/* eslint no-Utils: off */
const Pkg = require('./package.json')
const Utils = require('@bondco/ps-utils')
const connections = []

exports.register = (server, options, next) => {
  const io = require('socket.io')(server.listener)

  io.on('connection', function (socket) {
    socket.emit('test_event_from_node', Date.now())

    /* when a new robot joins everyone is notified */
    socket.on('new_connection', function(conn) {
      conn.recieved = Date.now()
      connections.push(conn.name)
      const cons = Object.keys(io.sockets.sockets)
      Utils.log(`New Connection: ${conn.name}; ${cons.length} connections in total.`)
      io.sockets.emit('new_connection_recieved', `${conn.name} has joined; ${cons.length} connections in total.`)
    })
  })

  const nameSpaces = []

  for (let i = 0; i <= 2; i++) {
    const nameSpace = io.of(`/robot${i}`)
    nameSpaces.push(nameSpace)

    nameSpace.on('connection', function (s) {
      s.on('new_connection', function(conn) {
        conn.recieved = Date.now()
        connections.push(conn.name)
        Utils.log(connections)
        const cons = Object.keys(io.sockets.sockets)
        // Utils.log(Object.keys(io.nsps))
        io.sockets.emit('new_connection_recieved', `${conn.name} has joined; ${cons.length} connections in total.`)
        nameSpaces.forEach((space) => {
          space.emit('new_connection_recieved', `${conn.name} has joined; ${cons.length} connections in total.`)
        })
      })

      s.on('unique_event', function(conn) {
        nameSpace.emit('unique_event_response', `${conn.name} triggered Unique event`)
      })
    })
  }
  /* for test only */
  next()
}

exports.register.attributes = {
  pkg: Pkg
}
